#!/bin/bash
#
# Copyright (c) 2019 by Thomas A. Early N7TAE
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

InstallSystem () {
	local n
	if [ -z ${1} ]; then
		n=$( grep processor /proc/cpuinfo | wc -l )
		echo "Detected $n processors for make"
		make base -j$n
	fi
	sudo make ${1}installbase
	if [ $ndvap -gt 0 ]; then
		if [ -z ${1} ]; then
			make qndvap -j$n
		fi
		if [ $ndvap -eq 1 ]; then
			sudo make ${1}installdvap
		else
			sudo make MODULE=$advap[0] ${1}installdvap
			sudo make MODULE=$advap[1] ${1}installdvap
			if [ $ndvap -eq 3 ]; then
				sudo make MODULE=$advap[2] ${1}installdvap
			fi
		fi
	fi
	if [ $ndvrptr -gt 0 ]; then
		if [ -z ${1} ]; then
			make qndvrptr -j$n
		fi
		if [ $ndvrptr -eq 1 ]; then
			sudo make ${1}installdvrptr
		else
			sudo make MODULE=$advrptr[0] ${1}installdvrptr
			sudo make MODULE=$advrptr[1] ${1}installdvrptr
			if [ $ndvrptr -eq 3 ]; then
				sudo make MODULE=$advrptr[2] ${1}installdvrptr
			fi
		fi
	fi
	if [ $nitap -gt 0 ]; then
		if [ -z ${1} ]; then
			make qnitap -j$n
		fi
		if [ $nitap -eq 1 ]; then
			sudo make ${1}installitap
		else
			sudo make MODULE=$aitap[0] ${1}installitap
			sudo make MODULE=$aitap[1] ${1}installitap
			if [ $nitap -eq 3 ]; then
				sudo make MODULE=$aitap[2] ${1}installitap
			fi
		fi
	fi
	if [ $nmmdvm -gt 0 ]; then
		if [ -z ${1} ]; then
			make qnrelay -j$n
		fi
		if [ $nmmdvm -eq 1 ]; then
			sudo make ${1}installrelay
		else
			sudo make MODULE=$ammdvm[0] ${1}installrelay
			sudo make MODULE=$ammdvm[1] ${1}installrelay
			if [ $nmmdvm -eq 3 ]; then
				sudo make MODULE=$advap[2] ${1}installrelay
			fi
		fi
	fi
}

BaseStatus () {
	local LoadGate SubGate LoadLink SubLink LoadDTMF SubDTMF
	LoadGate=$( systemctl show -p LoadState --value qngateway )
	SubGate=$( systemctl show -p SubState --value qngateway )
	LoadLink=$( systemctl show -p LoadState --value qnlink )
	SubLink=$( systemctl show -p SubState --value qnlink )
	LoadDTMF=$( systemctl show -p LoadState --value qndtmf )
	SubDTMF=$( systemctl show -p SubState --value qndtmf )
	if [[ $LoadGate == 'loaded' ]]; then
		if [[ $SubGate == 'running' ]]; then
			GateState='running'
		else
			GateState='stopped'
		fi
	else
		GateState='non installed'
	fi
	echo "QetGateway is $GateState"
	if [[ $LoadLink == 'loaded' ]]; then
		if [[ $SubLink == 'running' ]]; then
			LinkState='running'
		else
			LinkState='stopped'
		fi
	else
		LinkState='non installed'
	fi
	echo "QetLink is $LinkState"
	if [[ $LoadDTMF == 'loaded' ]]; then
		if [[ $SubDTMF == 'running' ]]; then
			DTMFState='running'
		else
			DTMFState='stopped'
		fi
	else
		DTMFState='non installed'
	fi
	echo "DTMF is $DTMFState"
}

ModuleStatus () {
	local LoadState SubState mcvar
	if [ -z ${3} ]; then
		ModuleState[$1]='EMPTY'
	else
		mcvar="n${3}"
		if [[ ${!mcvar} > 1 ]]; then
			process="${3}${2}"
		else
			process="${3}"
		fi
		LoadState=$( systemctl show -p LoadState --value $process )
		SubState=$( systemctl show -p SubState --value $process )
		if [[ "$LoadState" == "loaded" ]]; then
			if [[ $SubState == "running" ]]; then
				ModuleState[$1]='running'
			else
				ModuleState[$1]='stopped'
			fi
		else
			ModuleState[$1]='not installed'
		fi
		echo "Module ${2^^} - ${3^^} is ${ModuleState[$1]}"
	fi
}

# get defined modules from the config file
if [ -e qn.cfg ]; then
	source <( grep "^module_[abc]=" qn.cfg )
	if [ -z "$module_a" ] && [ -z "$module_b" ] && [ -z "$module_c" ]; then
		echo "No moudules defined in the qn.cfg file!"
		exit 1
	fi
else
	"ERROR: can't find the qn.cfg file"
	exit 1
fi

# get the installation directory from the make file
if [ -e makefile ]; then
	MAKEFILE=makefile
elif [ -e Makefile ]; then
	MAKEFILE=Makefile
else
	echo "ERROR: There is no Makefile or makefile"
	exit 1
fi
source <( grep "^BINDIR=" $MAKEFILE )
if [ -z $BINDIR ]; then
	echo "ERROR: The BINDIR definition in $MAKEFILE is empty!"
	exit 1
fi
if [ ! -d "$BINDIR" ]; then
	echo "ERROR: The BINDIR directory $BINDIR is not a directory!"
	exit 1
fi

ndvap=0
ndvrptr=0
nitap=0
nmmdvm=0

for m in a b c ; do
	mod=module_${m}
	if [ -z ${!mod} ]; then continue; fi
	type=${!mod}
	if [[ "$type" == 'dvap' ]]; then
		advap[${ndvap}]=${m}
		ndvap=$((ndvap + 1))
	elif [[ "$type" == 'dvrptr' ]]; then
		advrptr[$ndvap]=${m}
		ndvrptr=$((ndvrptr + 1))
	elif [[ "$type" == 'itap' ]]; then
		aitap[${nitap}]=${m}
		nitap=$((nitap + 1))
	elif [[ "$type" == 'mmdvm' ]]; then
		ammdvm[${nmmdvm}]=${m}
		nmmdvm=$((nmmdvm + 1))
	fi
done

MODULE_COUNT=$((ndvap + ndvrptr + nitap + nmmdvm))

while [[ "$ans" != q* ]]; do
	clear
	echo
	echo "            Qnet Administration Menu"
	echo
	BaseStatus
	ModuleStatus 0 a "$module_a"
	ModuleStatus 1 b "$module_b"
	ModuleStatus 2 c "$module_c"
	echo
	if [[ "$LoadGate" == "not-found" ]] || [[ "$LoadLink" == "not-found" ]]; then
		echo "i  : Install configured system"
	else
		echo "u  : Uninstall configured System"
	fi
	if [[ "$LoadDTMF" == "not-found" ]]; then
		echo "D  : Install DTMF"
	else
		echo "U  : Uninstall DTMF"
	fi
	echo "c  : Clean (remove temporary files and locally build executables)"
	echo
	read -p "q  to quit. Command: " ans

	# EXECUTE COMMANDS
	if   [[ "$ans" == i* ]]; then
		InstallSystem
	elif [[ "$ans" == u* ]]; then
		InstallSystem un
	elif [[ "$ans" == d* ]]; then
		sudo make installdtmf
	elif [[ "$ans" == U* ]]; then
		sudo make uninstalldtmf
	elif [[ "$ans" == c* ]]; then
		make clean
	fi
done

exit 0
